{"file":"maskDefinition.mjs","mappings":";;;;;;;AAIO,SAAS,eAAe,MAAM,cAAc,SAAS;AACxD,SAAO,oBAAoB,UAAU,MAAM,WAAY;AACnD,QAAI,SAAS,iBAAiB,MAAM,cAAc,SAAS,KAAK;AAChE,QAAI,OAAO,SAAS,IAAI,GAAG;AACvB,sBAAgB,MAAM;AAAA,IAClC;AACQ,WAAO;AAAA,EACf,CAAK;AACL;AACA,SAAS,iBAAiB,MAAM,gBAAgB;AAC5C,MAAI,eAAe,IAAI,IAAI,GAAG;AAC1B,WAAO,eAAe,IAAI,IAAI;AAAA,EACtC;AACI,MAAI,gBAAgB,MAAM,QAAQ,IAAI,IAAI,KAAK,uBAAO,OAAO,IAAI;AACjE,iBAAe,IAAI,MAAM,aAAa;AACtC,SAAO;AACX;AACA,SAAS,iBAAiB,MAAM,cAAc,SAAS,WAAW,MAAM;AACpE,MAAI;AACJ,MAAI,eAAe,QAAQ;AAC3B,MAAI,OAAO,iBAAiB,MAAM,QAAQ,cAAc;AACxD,MAAI,MAAM,QAAQ,IAAI,GAAG;AACrB,aAAS,KAAK,GAAG,KAAK,MAAM,KAAK,KAAK,QAAO,CAAE,GAAG,KAAK,GAAG,QAAQ,MAAM;AACpE,UAAI,KAAK,GAAG,EAAE,GAAG,QAAQ,GAAG,CAAC,GAAG,OAAO,GAAG,CAAC;AAC3C,UAAI,SAAS,MAAM;AACf,aAAK,KAAK,IAAI;AACd;AAAA,MAChB;AACY,UAAI,SAAS,iBAAiB,MAAM,cAAc,SAAS,WAAW,WAAW,YAAY,QAAQ,GAAG,OAAO,QAAQ,IAAI,GAAG,EAAE,OAAO,OAAO,GAAG,IAAI,MAAM;AAC3J,UAAI,aAAa,IAAI,MAAM,GAAG;AAC1B,qBAAa,IAAI,IAAI;AAAA,MACrC;AACY,WAAK,KAAK,IAAI;AAAA,IAC1B;AACQ,WAAO,aAAa,IAAI,IAAI,IAAI,OAAO;AAAA,EAC/C;AACI,WAAS,KAAK,GAAG,KAAK,aAAa,YAAY,KAAK,GAAG,QAAQ,MAAM;AACjE,QAAI,YAAY,GAAG,EAAE;AACrB,QAAI,QAAQ;AAGZ,QAAI,WAAW;AACX,mBAAa,IAAI,IAAI;AAAA,IACjC;AACQ,QAAI,UAAU,SAAS,KAAK,OAAO;AAC/B,UAAI,UAAU,uBAAuB,SAAS;AAC9C,UAAI,oBAAoB,UAAU;AAClC,cAAQ,KAAK,OAAO,KAAK,KAAK,OAAO;AACrC,UAAI,UAAU,QAAQ;AAClB;AAAA,MAChB;AACY,UAAI,qBAAqB,UAAU,MAAM;AACrC,YAAI,SAAS,iBAAiB,KAAK,OAAO,GAAG,mBAAmB,SAAS,WAAW,WAAW,YAAY,QAAQ,GAAG,OAAO,QAAQ,IAAI,GAAG,EAAE,OAAO,OAAO,IAAI,MAAM;AACtK,YAAI,aAAa,IAAI,MAAM,GAAG;AAC1B,kBAAQ;AAAA,QAC5B;AAAA,MACA;AACY,UAAI,EAAE,WAAW,YAAY,QAAQ;AACjC,aAAK,OAAO,IAAI;AAAA,MAChC;AACY,UAAI,WAAW,YAAY,OAAO;AAC9B,YAAI,aACA,YAAY;AAAA;AAAA;AAAA;AAAA,QAKZ,GAAG,KAAK,OAAO,yBAAyB,MAAM,OAAO,OAAO,QAAQ,OAAO,SAAS,SAAS,GAAG,QAAQ;AACxG,iBAAO,eAAe,MAAM,SAAS,6BAA6B,SAAS,OAAO,QAAQ,IAAI,QAAQ,eAAe,QAAQ,aAAa,CAAC;AAAA,QAC/J,OACqB;AACD,iBAAO,KAAK,OAAO;AACnB,eAAK,OAAO,IAAI;AAAA,QACpC;AAAA,MACA;AAAA,IACA;AACQ,QAAI,UAAU,SAAS,KAAK,oBACvB,CAAC,UAAU,iBACR,QAAQ,MAAM,gBAAgB,WAAW,KAAK,UAAU,IAAI;AAChE,cAAQ,iBAAiB,MAAM,UAAU,cAAc,SAAS,WAAW,IAAI;AAAA,IAC3F;AACQ,QAAI,UAAU,SAAS,KAAK,iBAAiB;AACzC,UAAI,eAAe,UAAU,KAAK;AAClC,UAAI,WAAW,QAAQ,YAAY,YAAY,MAC1C,QAAQ,YAAY,YAAY,IAC7B,QAAQ,MAAM,eAAe,YAAY;AACjD,gBAAU,UAAU,IAAI,YAAY;AACpC,UAAI,OAAO,oBAAoB,SAAS;AACxC,UAAI,SAAS,QAAQ;AACjB,gBAAQ,iBAAiB,MAAM,SAAS,cAAc,SAAS,SAAS,WAAW,IAAI;AAAA,MACvG;AAAA,IACA;AACQ,QAAI,aAAa,IAAI,KAAK,GAAG;AACzB,mBAAa,IAAI,IAAI;AAAA,IACjC;AAAA,EACA;AACI,MAAI,gBAAgB,QAAQ,EAAE,gBAAgB,OAAO;AACjD,SAAK,aAAa,KAAK;AAAA,EAC/B;AAII,MAAI,OAAO,KAAK,IAAI,EAAE,WAAW,OAAO,KAAK,IAAI,EAAE,QAAQ;AACvD,iBAAa,IAAI,IAAI;AAAA,EAC7B;AACI,SAAO,aAAa,IAAI,IAAI,IAAI,OAAO;AAC3C;AACA,SAAS,6BAA6B,WAAW,OAAO,MAAM,eAAe,eAAe;AACxF,MAAI,WAAW,WAAY;AACvB,QAAI,oBAAoB,YAAY;AAChC,aAAO;AAAA,IACnB;AACQ,eAAW,YAAY,SAAS,UAAU,KAAK,IAAI,gBAC/C,GAAG,OAAO,eAAe,IAAI,EAAE,OAAO,eAAe,GAAG,IACtD,aAAa,OAAO,aAAa,GAAG,GAAG,OAAO,MAAM,GAAG,EAAE,OAAO,SAAS,EAAE,QAAQ,OAAO,EAAE,CAAC;AACnG,eAAW,WAAY;AAAE,aAAO;AAAA,IAAQ;AACxC,WAAO;AAAA,EACV;AACD,SAAO;AAAA,IACH,KAAK,WAAY;AACb,aAAO,SAAU;AAAA,IACpB;AAAA,IACD,KAAK,SAAU,UAAU;AACrB,iBAAW,WAAY;AAAE,eAAO;AAAA,MAAW;AAAA,IAC9C;AAAA,IACD,YAAY;AAAA,IACZ,cAAc;AAAA,EACjB;AACL;","names":[],"sources":["../../../../../../../node_modules/@apollo/client/masking/maskDefinition.js"],"sourcesContent":["import { Kind } from \"graphql\";\nimport { getFragmentMaskMode, maybeDeepFreeze, resultKeyNameFromField, } from \"../utilities/index.js\";\nimport { disableWarningsSlot } from \"./utils.js\";\nimport { invariant } from \"../utilities/globals/index.js\";\nexport function maskDefinition(data, selectionSet, context) {\n    return disableWarningsSlot.withValue(true, function () {\n        var masked = maskSelectionSet(data, selectionSet, context, false);\n        if (Object.isFrozen(data)) {\n            maybeDeepFreeze(masked);\n        }\n        return masked;\n    });\n}\nfunction getMutableTarget(data, mutableTargets) {\n    if (mutableTargets.has(data)) {\n        return mutableTargets.get(data);\n    }\n    var mutableTarget = Array.isArray(data) ? [] : Object.create(null);\n    mutableTargets.set(data, mutableTarget);\n    return mutableTarget;\n}\nfunction maskSelectionSet(data, selectionSet, context, migration, path) {\n    var _a;\n    var knownChanged = context.knownChanged;\n    var memo = getMutableTarget(data, context.mutableTargets);\n    if (Array.isArray(data)) {\n        for (var _i = 0, _b = Array.from(data.entries()); _i < _b.length; _i++) {\n            var _c = _b[_i], index = _c[0], item = _c[1];\n            if (item === null) {\n                memo[index] = null;\n                continue;\n            }\n            var masked = maskSelectionSet(item, selectionSet, context, migration, globalThis.__DEV__ !== false ? \"\".concat(path || \"\", \"[\").concat(index, \"]\") : void 0);\n            if (knownChanged.has(masked)) {\n                knownChanged.add(memo);\n            }\n            memo[index] = masked;\n        }\n        return knownChanged.has(memo) ? memo : data;\n    }\n    for (var _d = 0, _e = selectionSet.selections; _d < _e.length; _d++) {\n        var selection = _e[_d];\n        var value = void 0;\n        // we later want to add acessor warnings to the final result\n        // so we need a new object to add the accessor warning to\n        if (migration) {\n            knownChanged.add(memo);\n        }\n        if (selection.kind === Kind.FIELD) {\n            var keyName = resultKeyNameFromField(selection);\n            var childSelectionSet = selection.selectionSet;\n            value = memo[keyName] || data[keyName];\n            if (value === void 0) {\n                continue;\n            }\n            if (childSelectionSet && value !== null) {\n                var masked = maskSelectionSet(data[keyName], childSelectionSet, context, migration, globalThis.__DEV__ !== false ? \"\".concat(path || \"\", \".\").concat(keyName) : void 0);\n                if (knownChanged.has(masked)) {\n                    value = masked;\n                }\n            }\n            if (!(globalThis.__DEV__ !== false)) {\n                memo[keyName] = value;\n            }\n            if (globalThis.__DEV__ !== false) {\n                if (migration &&\n                    keyName !== \"__typename\" &&\n                    // either the field is not present in the memo object\n                    // or it has a `get` descriptor, not a `value` descriptor\n                    // => it is a warning accessor and we can overwrite it\n                    // with another accessor\n                    !((_a = Object.getOwnPropertyDescriptor(memo, keyName)) === null || _a === void 0 ? void 0 : _a.value)) {\n                    Object.defineProperty(memo, keyName, getAccessorWarningDescriptor(keyName, value, path || \"\", context.operationName, context.operationType));\n                }\n                else {\n                    delete memo[keyName];\n                    memo[keyName] = value;\n                }\n            }\n        }\n        if (selection.kind === Kind.INLINE_FRAGMENT &&\n            (!selection.typeCondition ||\n                context.cache.fragmentMatches(selection, data.__typename))) {\n            value = maskSelectionSet(data, selection.selectionSet, context, migration, path);\n        }\n        if (selection.kind === Kind.FRAGMENT_SPREAD) {\n            var fragmentName = selection.name.value;\n            var fragment = context.fragmentMap[fragmentName] ||\n                (context.fragmentMap[fragmentName] =\n                    context.cache.lookupFragment(fragmentName));\n            invariant(fragment, 47, fragmentName);\n            var mode = getFragmentMaskMode(selection);\n            if (mode !== \"mask\") {\n                value = maskSelectionSet(data, fragment.selectionSet, context, mode === \"migrate\", path);\n            }\n        }\n        if (knownChanged.has(value)) {\n            knownChanged.add(memo);\n        }\n    }\n    if (\"__typename\" in data && !(\"__typename\" in memo)) {\n        memo.__typename = data.__typename;\n    }\n    // This check prevents cases where masked fields may accidentally be\n    // returned as part of this object when the fragment also selects\n    // additional fields from the same child selection.\n    if (Object.keys(memo).length !== Object.keys(data).length) {\n        knownChanged.add(memo);\n    }\n    return knownChanged.has(memo) ? memo : data;\n}\nfunction getAccessorWarningDescriptor(fieldName, value, path, operationName, operationType) {\n    var getValue = function () {\n        if (disableWarningsSlot.getValue()) {\n            return value;\n        }\n        globalThis.__DEV__ !== false && invariant.warn(48, operationName ?\n            \"\".concat(operationType, \" '\").concat(operationName, \"'\")\n            : \"anonymous \".concat(operationType), \"\".concat(path, \".\").concat(fieldName).replace(/^\\./, \"\"));\n        getValue = function () { return value; };\n        return value;\n    };\n    return {\n        get: function () {\n            return getValue();\n        },\n        set: function (newValue) {\n            getValue = function () { return newValue; };\n        },\n        enumerable: true,\n        configurable: true,\n    };\n}\n//# sourceMappingURL=maskDefinition.js.map"],"version":3}